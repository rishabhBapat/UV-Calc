{"version":3,"sources":["presenters/DuctForm.js","presenters/AHUForm.js","presenters/DisplayResult.js","containers/AHUCalc.js","containers/DuctCalc.js","presenters/FormSelection.js","containers/App.js","index.js"],"names":["formStyle","fontFamily","fontSize","color","centerDiv","width","margin","textAlign","DuctForm","props","handleChange","bind","event","name","target","id","value","this","onChange","style","htmlFor","type","placeholder","onClick","reset","React","Component","AHUForm","resultStyle","fontWeight","DisplayResult","isNaN","resultValue","resultName","Math","floor","AHUCalc","state","assignVariable","calculateDosage","calculateIntensity","handleClick","setState","correctedDosage","totalWattage","log","distance","PI","coilLength","coilHeight","flowRate","diagonalDistance","sqrt","numRows","minIntensity","rowWattage","lampLength","maxIntensity","maxIntensityAlt","avgIntensity","DuctCalc","ductWidthAlt","ductWidth","numCols","ductHeightAlt","ductHeight","avgIntensityDistance","max","aIntensity","bIntensity","FormSelection","element","makeSelection","App","resetSelection","selection","AHUCalculator","DuctCalculator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35fbdf06.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/Form.css'\r\n\r\nexport const formStyle = {\r\n  fontFamily: 'calibri',\r\n  fontSize: 24,\r\n  color: '#e6e6e6', \r\n};\r\n\r\nexport const centerDiv = {\r\n  width: '25%',\r\n  margin: '50px auto',\r\n  textAlign: 'center'\r\n};\r\n\r\n//renders a form to collect variables and trigger the calculation, requires props for both.\r\nexport class DuctForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  \r\n  handleChange(event) {\r\n    const name = event.target.id;\r\n    const value = event.target.value;\r\n    this.props.onChange(name, value);\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div style={centerDiv}>\r\n        <form style={formStyle} onChange={this.handleChange}>\r\n          <label htmlFor='ductWidth'>\r\n          Duct Width \r\n          <input type='number' id='ductWidth' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='ductHeight'>\r\n          Duct Height\r\n          <input type='number' id='ductHeight' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='lampLength'>\r\n          Lamp Length\r\n          <input type='number' id='lampLength' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='flowRate'>\r\n          Flow Rate\r\n          <input type='number' id='flowRate' placeholder='in CFM'/>\r\n          </label>\r\n    \r\n          <label htmlFor='numRows'>\r\n          Number of Rows\r\n          <input type='number' id='numRows' placeholder='of lamps'/>\r\n          </label>\r\n    \r\n          <label htmlFor='numCols'>\r\n          Number of Columns\r\n          <input type='number' id='numCols' placeholder='of lamps'/>\r\n          </label>\r\n    \r\n          <label htmlFor='totalWattage'>\r\n          Total Lamp Wattage\r\n          <input type='number' id='totalWattage' placeholder='in W'/>\r\n          </label>\r\n        </form>\r\n        <button onClick={this.props.onClick}>Calculate</button>\r\n        <button onClick={this.props.reset}>Return to Selection</button>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n","import React from 'react';\r\nimport '../style/Form.css';\r\nimport {formStyle, centerDiv} from './DuctForm';\r\n\r\n//renders a form to collect variables and trigger the calculation, requires props for both.\r\nexport class AHUForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  \r\n  handleChange(event) {\r\n    const name = event.target.id;\r\n    const value = event.target.value;\r\n    this.props.onChange(name, value);\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div style={centerDiv}>\r\n        <form style={formStyle} onChange={this.handleChange}>\r\n          <label htmlFor='coilLength'>\r\n          Coil Length \r\n          <input type='number' id='coilLength' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='coilHeight'>\r\n          Coil Height\r\n          <input type='number' id='coilHeight' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='lampLength'>\r\n          Lamp Length\r\n          <input type='number' id='lampLength' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='distance'>\r\n          Distance\r\n          <input type='number' id='distance' placeholder='in cm'/>\r\n          </label>\r\n    \r\n          <label htmlFor='flowRate'>\r\n          Flow Rate\r\n          <input type='number' id='flowRate' placeholder='in CFM'/>\r\n          </label>\r\n    \r\n          <label htmlFor='numRows'>\r\n          Number of Rows\r\n          <input type='number' id='numRows' placeholder='of lamps'/>\r\n          </label>\r\n    \r\n          <label htmlFor='numCols'>\r\n          Number of Columns\r\n          <input type='number' id='numCols' placeholder='of lamps'/>\r\n          </label>\r\n    \r\n          <label htmlFor='lampCount'>\r\n          Total Count\r\n          <input type='number' id='lampCount' placeholder='of lamps'/>\r\n          </label>\r\n    \r\n          <label htmlFor='totalWattage'>\r\n          Total Lamp Wattage\r\n          <input type='number' id='totalWattage' placeholder='in W'/>\r\n          </label>\r\n    \r\n          <label htmlFor='rowWattage'>\r\n          Row Lamp Wattage\r\n          <input type='number' id='rowWattage' placeholder='in W'/>\r\n          </label>\r\n        </form>\r\n        <button onClick={this.props.onClick}>Calculate</button>\r\n        <button onClick={this.props.reset}>Return to Selection</button>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n","import React from 'react';\r\nimport {centerDiv} from './DuctForm'\r\n\r\nconst resultStyle = {\r\n  fontFamily: 'calibri',\r\n  fontWeight: 'normal', \r\n  fontSize:   24,\r\n  color:      '#e6e6e6'\r\n}\r\n\r\nexport const DisplayResult = (props) => {\r\n  if(isNaN(props.resultValue)) {\r\n    return (\r\n      <div style={centerDiv}>\r\n      <span style={resultStyle}>Your {props.resultName} has not been calculated yet.</span>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div style={centerDiv}>\r\n      <span style={resultStyle}>Your {props.resultName} is <span style={{color: '#b3ffb3'}}>{Math.floor(props.resultValue)}</span>.</span>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n","import React from 'react';\r\nimport {AHUForm} from '../presenters/AHUForm';\r\nimport {DisplayResult} from '../presenters/DisplayResult';\r\n\r\nexport class AHUCalc extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.assignVariable = this.assignVariable.bind(this);\r\n    this.calculateDosage = this.calculateDosage.bind(this);\r\n    this.calculateIntensity = this.calculateIntensity.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  assignVariable(name, value) {\r\n    this.setState({[name]: value});\r\n  }\r\n\r\n  calculateDosage() {\r\n    const totalAverageIntensity = ((this.state.totalWattage * 0.3) * (Math.log(this.state.distance / 2) + 0.577) * (10 ** 6)) / (2 * Math.PI * this.state.coilLength * (this.state.distance / 2));\r\n    const contactTime = (((this.state.distance / 30.48) * 1.5 * (this.state.coilHeight / 30.48) * (this.state.coilLength / 30.48)) / (this.state.flowRate)) * 60;\r\n    const correctedDosage = totalAverageIntensity * contactTime * 0.7;\r\n    this.setState({correctedDosage});\r\n  }\r\n\r\n  calculateIntensity() {\r\n    const diagonalDistance = Math.sqrt((this.state.coilHeight / (this.state.numRows * 2)) ** 2 + this.state.distance ** 2);\r\n    const minIntensity = ((this.state.rowWattage * 0.3 * 10 ** 6) / (2 * Math.PI * this.state.lampLength * diagonalDistance)) * 0.63; \r\n    const maxIntensity = minIntensity * 1.5;\r\n    const maxIntensityAlt = ((this.state.rowWattage * 0.3 * 10 ** 6) / (2 * Math.PI * this.state.lampLength * this.state.distance)) * 0.63; \r\n    const avgIntensity = ((minIntensity * 2) + (this.state.numRows * maxIntensityAlt) + (this.state.numRows - 1) * (minIntensity * 2)) / (this.state.numRows * 2 + 1);\r\n    this.setState({minIntensity});\r\n    this.setState({maxIntensity});\r\n    this.setState({avgIntensity});\r\n  }\r\n\r\n  handleClick() {\r\n    this.calculateDosage();\r\n    this.calculateIntensity();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <AHUForm onChange={this.assignVariable} onClick={this.handleClick} reset={this.props.reset}/>\r\n      <DisplayResult resultName={'Corrected UV Dosage'} resultValue={this.state.correctedDosage} />\r\n      <DisplayResult resultName={'Minimum Intensity'} resultValue={this.state.minIntensity} />\r\n      <DisplayResult resultName={'Maximum Intensity'} resultValue={this.state.maxIntensity} />\r\n      <DisplayResult resultName={'Average Intensity'} resultValue={this.state.avgIntensity} />\r\n      </div>\r\n    )\r\n  }\r\n};  ","import React from 'react';\r\nimport {DuctForm} from '../presenters/DuctForm';\r\nimport {DisplayResult} from '../presenters/DisplayResult';\r\n\r\nexport class DuctCalc extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.assignVariable = this.assignVariable.bind(this);\r\n    this.calculateDosage = this.calculateDosage.bind(this);\r\n    this.calculateIntensity = this.calculateIntensity.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  assignVariable(name, value) {\r\n    this.setState({[name]: value});\r\n  }\r\n\r\n  calculateDosage() {\r\n    const ductWidthAlt = this.state.ductWidth / (this.state.numCols * 2);\r\n    const ductHeightAlt = this.state.ductHeight / (this.state.numRows * 2);\r\n    const avgIntensityDistance = Math.max(ductHeightAlt, ductWidthAlt); \r\n    const totalAverageIntensity = ((this.state.totalWattage * 0.3) * (Math.log(avgIntensityDistance) + 0.577) * (10 ** 6)) / (2 * Math.PI * this.state.lampLength * (avgIntensityDistance));\r\n    const contactTime = (((this.state.lampLength / 30.48) * (this.state.ductHeight / 30.48) * (this.state.ductWidth / 30.48)) / (this.state.flowRate)) * 60;\r\n    const correctedDosage = totalAverageIntensity * contactTime * 0.7;\r\n    this.setState({correctedDosage});\r\n  }\r\n\r\n  calculateIntensity() {\r\n    const ductWidthAlt = this.state.ductWidth / (this.state.numCols * 2);\r\n    const ductHeightAlt = this.state.ductHeight / (this.state.numRows * 2);\r\n    const diagonalDistance = Math.sqrt(ductHeightAlt ** 2 + ductWidthAlt ** 2);\r\n    const minIntensity = (((this.state.totalWattage / (this.state.numCols * this.state.numRows)) * 0.3 * 10 ** 6) / (2 * Math.PI * this.state.lampLength * diagonalDistance)) * 0.63; \r\n    const aIntensity = (((this.state.totalWattage / (this.state.numCols * this.state.numRows)) * 0.3 * 10 ** 6) / (2 * Math.PI * this.state.lampLength * ductWidthAlt)) * 0.63;\r\n    const bIntensity = (((this.state.totalWattage / (this.state.numCols * this.state.numRows)) * 0.3 * 10 ** 6) / (2 * Math.PI * this.state.lampLength * ductHeightAlt)) * 0.63;\r\n    this.setState({minIntensity});\r\n    this.setState({aIntensity});\r\n    this.setState({bIntensity});\r\n  }\r\n\r\n  handleClick() {\r\n    this.calculateDosage();\r\n    this.calculateIntensity();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <DuctForm onChange={this.assignVariable} onClick={this.handleClick} reset={this.props.reset}/>\r\n      <DisplayResult resultName={'Corrected UV Dosage'} resultValue={this.state.correctedDosage} />\r\n      <DisplayResult resultName={'Minimum Intensity at \\'d\\''} resultValue={this.state.minIntensity} />\r\n      <DisplayResult resultName={'Intensity at \\'a\\''} resultValue={this.state.aIntensity} />\r\n      <DisplayResult resultName={'Intensity at \\'b\\''} resultValue={this.state.bIntensity} />\r\n      </div>\r\n    )\r\n  }\r\n};  ","import React from 'react';\r\nimport '../style/Form.css';\r\nimport {formStyle, centerDiv} from './DuctForm';\r\n\r\nexport class FormSelection extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);  \r\n  }\r\n\r\n  handleClick(event){\r\n    const element = event.target.id;\r\n    this.props.makeSelection(element);\r\n  }\r\n\r\n  render() {\r\n      return(\r\n        <div style={centerDiv}>\r\n        <span style={formStyle}>Select Calculator Type</span>\r\n        <form>\r\n          <button id='AHUCalculator' onClick={this.handleClick}>AHU Calculator</button>\r\n          <button id='DuctCalculator' onClick={this.handleClick}>Duct Calculator</button>\r\n        </form>\r\n        </div>\r\n      )\r\n  }\r\n};\r\n","import React from 'react';\nimport {AHUCalc} from './AHUCalc';\nimport {DuctCalc} from './DuctCalc';\nimport {FormSelection} from '../presenters/FormSelection';\n\n//App that uses imported components to gather inputs and displays UV dosage\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      'selection': true,\n      'AHUCalculator': false,\n      'DuctCalculator': false\n    };\n    this.makeSelection = this.makeSelection.bind(this);\n    this.resetSelection = this.resetSelection.bind(this);\n  }\n  \n  makeSelection(element) {\n    this.setState({\n      'selection': false,\n      [element]: true\n    })\n  }\n\n  resetSelection() {\n    this.setState({\n      'selection': true,\n      'AHUCalculator': false,\n      'DuctCalculator': false\n    })\n  }\n\n  render() {\n    return(\n      <div>\n      {this.state.selection && <FormSelection makeSelection={this.makeSelection}/>}\n      {this.state.AHUCalculator && <AHUCalc reset={this.resetSelection}/>}\n      {this.state.DuctCalculator && <DuctCalc reset={this.resetSelection}/>}\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}